package chart

import (
	"log"
	"os"
	"path/filepath"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
)

type InsightPlots struct {
	VideoIds    []string
	Views       []opts.BarData
	Likes       []opts.BarData
	Comments    []opts.BarData
	Impressions []opts.BarData
}

func RenderInsights(plotName string, plots InsightPlots) {
	bar := charts.NewBar()

	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "Youtube Analytics",
		Subtitle: "Todays Channel Insights",
	}), charts.WithXAxisOpts(opts.XAxis{
		AxisLabel: &opts.AxisLabel{Show: true, Rotate: 90, Interval: "0"},
	}))

	// xData, yData := getBarItems(plots)
	bar.SetXAxis(plots.VideoIds).
		AddSeries("views", plots.Views).
		AddSeries("likes", plots.Likes).
		AddSeries("comments", plots.Comments).
		AddSeries("impressions", plots.Impressions)

	f, _ := os.Create(filepath.Join("data", plotName))
	if err := bar.Render(f); err != nil {
		log.Panic(err)
	}
}

// generate random data for bar chart
// func generateBarItems() []opts.BarData {
// 	items := make([]opts.BarData, 0)
// 	for i := 0; i < 7; i++ {
// 		items = append(items, opts.BarData{Value: rand.Intn(300)})
// 	}
// 	return items
// }

// func ViewInsights() {
// 	// create a new bar instance
// 	bar := charts.NewBar()
// 	// set some global options like Title/Legend/ToolTip or anything else
// 	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
// 		Title:    "My first bar chart generated by go-echarts",
// 		Subtitle: "It's extremely easy to use, right?",
// 	}))

// 	// Put data into instance
// 	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
// 		AddSeries("Category A", generateBarItems()).
// 		AddSeries("Category B", generateBarItems())
// 	// Where the magic happens
// 	f, _ := os.Create("bar.html")
// 	bar.Render(f)
// }
